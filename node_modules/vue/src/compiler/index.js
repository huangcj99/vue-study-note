/* @flow */

import { parse } from './parser/index'
import { optimize } from './optimizer'
import { generate } from './codegen/index'

/**
 * Compile a template.
 */
export function compile (
  template: string,
  options: CompilerOptions
): CompiledResult {
  /**
    ast结构
    {
      attrs: Array,
      attrsList: Array,    (内部是键值对数组  [{name: 'id', value=app}, ...] )
      attrsMaps: Object,    ({ id: 'app' })
      children: Array,     递归解析出的子节点
      parent: undefined,
      plain: false,
      static: false,
      tag: 'div',
      type: 1
      ...
    }
  */
  const ast = parse(template.trim(), options)
  //标记静态节点
  optimize(ast, options)
  const code = generate(ast, options)
  return {
    ast,

    /**
      render即为根据ast生成的渲染vNode的函数
      Vue.prototype._h = createElement;
      with (this) {
          return _h(
            'div',
            {
                attrs:{"id":"app"}
            },
            [
                _h('p',[_s(a)]),
                " ",
                _h('p',[_s(b)])
            ]
          )
        }
    */
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
}
